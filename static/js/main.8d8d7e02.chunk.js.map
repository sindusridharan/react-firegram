{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","comps/Modal.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","motion","div","key","layout","whileHover","opacity","s","onClick","url","img","src","alt","initial","animate","transition","delay","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","progressPercentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","style","width","UploadForm","types","type","onChange","e","selected","target","files","includes","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d8d7e02.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyAhKVIJmr_ErKJCML7sbvlRgD29quZxKTg\",\n    authDomain: \"react-firegram-eeb81.firebaseapp.com\",\n    projectId: \"react-firegram-eeb81\",\n    storageBucket: \"react-firegram-eeb81.appspot.com\",\n    messagingSenderId: \"156131136298\",\n    appId: \"1:156131136298:web:6d1116c77a2b0b0a09c453\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\n  //initializing 2 services\n  const projectStorage = firebase.storage();\n  const projectFirestore = firebase.firestore();\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\n  export {projectStorage, projectFirestore, timestamp};","import { useState, useEffect } from 'react';\nimport { projectFirestore } from '../firebase/config';\n\nconst useFirestore = (collection) => {\n  const [docs, setDocs] = useState([]);\n\n  useEffect(() => {\n    const unsub = projectFirestore.collection(collection)\n      .orderBy('createdAt', 'desc')\n      .onSnapshot(snap => {\n        let documents = [];\n        snap.forEach(doc => {\n          documents.push({...doc.data(), id: doc.id});\n        });\n        setDocs(documents);\n      });\n\n    return () => unsub();\n    // this is a cleanup function that react will run when\n    // a component using the hook unmounts\n  }, [collection]);\n\n  return { docs };\n}\n\nexport default useFirestore;\n","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\n\nconst ImageGrid = ({ setSelectedImg }) => {\n  const { docs } = useFirestore('images');\n\n  return (\n    <div className=\"img-grid\">\n      {docs && docs.map(doc => (\n        <motion.div className=\"img-wrap\" key={doc.id} \n          layout\n          whileHover={{ opacity: 1 }}s\n          onClick={() => setSelectedImg(doc.url)}\n        >\n          <motion.img src={doc.url} alt=\"uploaded pic\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          />\n        </motion.div>\n      ))}\n    </div>\n  )\n}\n\nexport default ImageGrid;","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>PictureGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from \"react\";\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\n\nconst useStorage = (file) => {\n\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n\n    useEffect(() => {\n        //reference to store the file\n        const storageRef = projectStorage.ref(file.name);\n        const collectionRef = projectFirestore.collection('images');\n\n        //asynchronous fn to store url in storage\n        storageRef.put(file).on('state_changed', (snap) => {\n            let progressPercentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n            setProgress(progressPercentage);\n        }, (err) => {\n            setError(err)\n        }, async () => {\n            const url = await storageRef.getDownloadURL();\n            const createdAt = timestamp();\n            collectionRef.add({url, createdAt })\n            setUrl(url);\n        })\n    }, [file])\n\n    return { progress, url, error }\n\n}\n\nexport default useStorage;","import React, { useEffect } from 'react';\nimport useStorage from '../hooks/useStorage';\n\nconst ProgressBar = ({file, setFile}) => {\n    const{url, progress} = useStorage(file);\n    \n    //remove progress bar after completed upload\n    useEffect(() => {\n        if(url) {\n            setFile(null);\n        }\n    }, [url, setFile])\n\n    return(\n        <div className=\"progress-bar\" style={{ width: progress + '%'}}></div>\n    )\n}\n\n\nexport default ProgressBar;","import React, { useState } from 'react';\nimport ProgressBar from \"../comps/ProgressBar\";\n\nconst UploadForm = () =>{\n\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(null);\n\n    const types = ['image/png', 'image/jpeg', 'image/jpg'];\n\n    const handleChange = (e) => {\n        let selected = e.target.files[0];\n    \n        if (selected && types.includes(selected.type)) {\n          setFile(selected);\n          setError('');\n        } else {\n          setFile(null);\n          setError('Please select an image file (png or jpg)');\n        }\n      };\n\n    return (\n        <form>\n            <label>\n                <input type=\"file\" onChange={handleChange} />\n                <span>+</span>\n            </label>\n            <div className=\"output\">\n                {error && <div className=\"error\">{error}</div>}\n                {file && <div>{file.name}</div>}\n                {file && <ProgressBar file={file} setFile={setFile}/>}\n            </div>\n        </form>\n    )\n}\n\nexport default UploadForm;","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst Modal = ({ setSelectedImg, selectedImg }) => {\n\n  const handleClick = (e) => {\n    if (e.target.classList.contains('backdrop')) {\n      setSelectedImg(null);\n    }\n  }\n\n  return (\n    <motion.div className=\"backdrop\" onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img src={selectedImg} alt=\"enlarged pic\" \n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  )\n}\n\nexport default Modal;","import React, {useState}from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport Modal from './comps/Modal';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      { selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}